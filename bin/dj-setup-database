#!/bin/sh
# Generated from 'dj-setup-database.in' on Tue Jan 21 15:36:01 CST 2014.

# This script allows one to perform DOMjudge database setup actions.
# See usage below for possible commands and options.

set -e

ETCDIR="/opt/domjudge/domserver/etc"
SQLDIR="/opt/domjudge/domserver/sql"

PASSWDFILE="$ETCDIR/dbpasswords.secret"

verbose()
{
	[ -z "$QUIET" ] && echo "$@"
}

# Wrapper around mysql command to allow setting options, user, etc.
mysql()
{
	local user pass
	if [ -n "$DBUSER" ]; then
		user="-u $DBUSER"
	else
		user="${DBA_USER:+-u ${DBA_USER}}"
	fi
	if [ -n "$PASSWD" ]; then
		pass="-p$PASSWD"
	else
		pass=""
		[ -n "$PROMPT_PASSWD" ] && pass="-p"
		[ -n "$DBA_PASSWD" ]    && pass="-p$DBA_PASSWD"
	fi
	command mysql $user $pass -h $DBHOST --silent --skip-column-names "$@"
}

read_dbpasswords()
{
	if [ ! -r "$PASSWDFILE" ]; then
		echo "Error: password file '$PASSWDFILE' not found or not readable."
		echo "You may want to run: $0 genpass"
		return 1
	fi
	local OLDIFS="$IFS"
	IFS=":"
	# Don't pipe $PASSWDFILE into this while loop as that spawns a
	# subshell and then variables are not retained in the original shell.
	while read role host db user passwd; do
		# Skip lines beginning with a '#'
		[ "x$role" != "x${role###}" ] && continue
		domjudge_DBHOST=$host
		domjudge_DBNAME=$db
		domjudge_DBUSER=$user
		domjudge_PASSWD=$passwd
		DBHOST=$host
		DBNAME=$db
	done < "$PASSWDFILE"
	IFS="$OLDIFS"
	if [ -z "$domjudge_PASSWD" ]; then
		echo "Error: no login info found."
		return 1
	fi
	verbose "Database credentials read from '$PASSWDFILE'."
}

status()
{
	if [ ! -r "$PASSWDFILE" ]; then
		echo "Error: cannot read database password file '$PASSWDFILE'."
		return 1
	fi
	read_dbpasswords || return 1

	echo -n "Trying to connect to the server as DB admin: "
	mysql -e 'SELECT "success.";' || return 1

	echo -n "Trying to connect to the server with user '$domjudge_DBUSER': "
	DBUSER=$domjudge_DBUSER PASSWD=$domjudge_PASSWD mysql -e 'SELECT "success.";' || return 1

	echo -n "Searching for database \`$DBNAME\`: "
	mysql -e "USE \`$DBNAME\`; SELECT 'found.';" || return 1

	echo -n "Searching for data in database: "
	DBUSER=$domjudge_DBUSER PASSWD=$domjudge_PASSWD \
		mysql -e "USE \`$DBNAME\`; SELECT name FROM team WHERE login = 'domjudge';" || return 1

	echo -n "MySQL server version: "
	mysql -e 'SELECT version();'
}

create_db_users()
{
	local user pass
	(
	echo "CREATE DATABASE \`$DBNAME\` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
# Need to add both '%' and 'localhost' as entries, because a default
# fresh MySQL installation has a Host='localhost',User='' entry which
# is more specific than Host='%' and thus leads to Access Denied errors.
	echo "CREATE USER
		'$domjudge_DBUSER'@'%' IDENTIFIED BY '$domjudge_PASSWD',
		'$domjudge_DBUSER'@'localhost' IDENTIFIED BY '$domjudge_PASSWD';"

	echo "GRANT SELECT, INSERT, UPDATE, DELETE ON \`$DBNAME\`.* TO '$domjudge_DBUSER';"

	echo "FLUSH PRIVILEGES;"
	) | mysql
	verbose "DOMjudge database and user(s) created."
}

remove_db_users()
{
	local user pass
	(
	echo "DROP DATABASE IF EXISTS \`$DBNAME\`;"
# In MySQL < 5.0.2, 'DROP USER' only removes the user, not its privileges:
	echo "REVOKE ALL PRIVILEGES, GRANT OPTION FROM
		'$domjudge_DBUSER'@'%', '$domjudge_DBUSER'@'localhost';"
	echo "DROP USER
		'$domjudge_DBUSER'@'%', '$domjudge_DBUSER'@'localhost';"
	echo "FLUSH PRIVILEGES;"
	) | mysql -f
	verbose "DOMjudge database and user(s) removed."
}

### Script starts here ###

# Parse command-line options:
while getopts ':u:p:qr' OPT ; do
	case "$OPT" in
		u)
			DBA_USER=$OPTARG
			;;
		p)
			DBA_PASSWD=$OPTARG
			;;
		q)
			QUIET=1
			;;
		r)
			PROMPT_PASSWD=1
			;;
		:)
			echo "Error: option '$OPTARG' requires an argument."
			exit 1
			;;
		?)
			echo "Error: unknown option '$OPTARG'."
			exit 1
			;;
		*)
			echo "Error: unknown error reading option '$OPT', value '$OPTARG'."
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

case "$1" in

status)
	if status ; then
		echo "Database check successful: database and users present and accessible."
		exit 0
	else
		echo "Database status check failed."
		exit 1
	fi
	;;

genpass)
	if [ -f "$PASSWDFILE" ]; then
		echo "Error: password file '$PASSWDFILE' already exists."
		exit 1
	fi
	echo "Running '$ETCDIR/gendbpasswords'..."
	$ETCDIR/gendbpasswords > "$PASSWDFILE"
	echo "Password file '$PASSWDFILE' created."
	;;

install)
	read_dbpasswords
	create_db_users
	cat $SQLDIR/mysql_db_structure.sql \
	    $SQLDIR/mysql_db_defaultdata.sql \
	    $SQLDIR/mysql_db_examples.sql \
	     | mysql -D "$DBNAME"
	verbose "SQL structure and default/example data installed."
	rm -f $TMPFILE
	;;

bare-install)
	read_dbpasswords
	create_db_users
 	cat $SQLDIR/mysql_db_structure.sql \
 	    $SQLDIR/mysql_db_defaultdata.sql \
	     | mysql -D "$DBNAME"
	verbose "SQL structure and defaults installed(No sample data)."
	rm -f $TMPFILE
	;;

uninstall)
	read_dbpasswords
	remove_db_users
	;;

# Upgrades the DB structure and permissions to current version
# using SQL upgrade files under sql/upgrade.
upgrade)
	# check for legacy dbpasswords.secret content
	if grep -Eq ^team: $PASSWDFILE >/dev/null 2>&1 ; then
		echo "Warning: please remove all non-jury users from $PASSWDFILE"
		echo "You may also remove those users from MySQL."
	fi
	TMPOUT=`mktemp --tmpdir domjudge-sql.XXXXXX`
	read_dbpasswords
	for i in "$SQLDIR"/upgrade/*.sql ; do
		if [ ! -r "$i" ]; then
			echo "Error: cannot read upgrade script '$i'."
			exit 1
		fi
		# First find the line where the upgrade check is performed to
		# filter possible error messages later.
		UPGRADELINE=`grep -n '@UPGRADE-CHECK@' "$i" | cut -d : -f 1`
		UPGRADELINE=$((UPGRADELINE+1))
		if cat $i | mysql -D "$DBNAME" >$TMPOUT 2>&1 ; then
			echo "Upgraded script '$i'."
		else
			if grep -E "^ERROR .* at line ${UPGRADELINE}: " $TMPOUT >/dev/null 2>&1 ; then
				echo "Skipped script '$i': already applied."
			else
				echo "Error upgrading script '$i':"
				cat $TMPOUT
				rm -f $TMPOUT
				exit 1
			fi
		fi
	done
	verbose "DOMjudge database upgrade completed."
	rm -f $TMPOUT
	;;

	*)
	cat <<EOF
Unknown subcommand '$1'
Usage: $0 [option]... <command>

Commands:
  status        check database installation status
  genpass       generate password file
  install       create database, example contest and users if not existing
  bare-install  create database, setup defaults if not existing
  uninstall     remove database users and database, INCLUDING ALL DATA!
  upgrade       upgrade MySQL database schema to current version

Options:
  -u <user>  connect to MySQL with DB admin <user>
  -p <pass>  use password <pass> for DB admin user
  -r         read DB admin password from prompt

EOF
	exit 1
	;;

esac
