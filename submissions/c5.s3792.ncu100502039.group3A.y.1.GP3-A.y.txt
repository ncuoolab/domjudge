%{
#include <stdio.h>
#include <string.h>
int yylex(void);
void yyerror(char *message);
struct node * insertNode(int type, double data, char op, struct node *left, str$
void preorder(struct node *root);
struct node {
        int type;
        char op;
        double data,cur_result;
        struct node *left,*right;
};
%}
%union {
    double fval;
    struct node *nptr;
}
%token<fval> RNUMBER
%type<nptr> expr
%left '+' '-'
%left '*' '/'
%%
line    : expr { printf("the preorder expression is : "); preorder($1); printf($
    ;
expr    : '(' expr ')' { $$ = $2; }
        | expr '+' expr { $$ = insertNode( 0, 0, '+', $1, $3 );
         $$->cur_result = $1->cur_result + $3->cur_result; }
        | expr '-' expr { $$ = insertNode( 0, 0, '-', $1, $3 ); $$->cur_result $
        | expr '*' expr { $$ = insertNode( 0, 0, '*', $1, $3 ); $$->cur_result $
        | expr '/' expr { $$ = insertNode( 0, 0, '/', $1, $3 ); $$->cur_result $

        ;
%% void yyerror ( char *message) {
        printf ("%s\n", message);
}
void preorder(struct node *root) {
        if(root->type == 0)
                printf("%c ", root->op);
        else if(root->type == 1)
                printf("%.f ", root->data);
        if(root->left != NULL)
                preorder(root->left);
        if(root->right != NULL)
                preorder(root->right);
}
struct node * insertNode(int type, double data, char op, struct node *left, str$
        struct node *newNode = malloc(sizeof(struct node));
        newNode->type = type;
        newNode->data = data;
        newNode->op = op;
        newNode->left = left;
        newNode->right = right;
        return newNode;
}
int main(int argc, char *argv[]) {
        yyparse();
        return 0;
}
